blueprint:
  name: Estado lógico de Ventanas Abiertas/Cerradas
  description: >
    Automatización para determinar si las ventanas deberían estar abiertas o cerradas 
    en función de la temperatura interior, exterior, temperatura de confort y diferencia mínima.
  domain: automation
  input:
    sensor_exterior:
      name: Sensor de temperatura exterior
      selector:
        entity:
          domain: sensor
          device_class: temperature
    sensor_interior:
      name: Sensor de temperatura interior
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperatura_confort:
      name: Temperatura de confort
      selector:
        number:
          min: 10
          max: 40
          step: 0.5
          unit_of_measurement: "°C"
    diferencia_minima:
      name: Diferencia mínima de temperatura
      default: 1.0
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: "°C"
    accion_ventanas_abiertas:
      name: Acción si se deben abrir las ventanas
      selector:
        action: {}
    accion_ventanas_cerradas:
      name: Acción si se deben cerrar las ventanas
      selector:
        action: {}

trigger:
  - platform: state
    entity_id: !input sensor_exterior
  - platform: state
    entity_id: !input sensor_interior

variables:
  temp_ext: "{{ states(!input sensor_exterior) | float(0) }}"
  temp_int: "{{ states(!input sensor_interior) | float(0) }}"
  temp_confort: !input temperatura_confort
  dif_min: !input diferencia_minima
  debe_abrir: "{{ (temp_ext - temp_int) >= dif_min and temp_ext > temp_confort }}"

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ debe_abrir }}"
        sequence: !input accion_ventanas_abiertas
    default: !input accion_ventanas_cerradas

mode: single
