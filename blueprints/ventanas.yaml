blueprint:
  name: Estado lógico de Ventanas Abiertas/Cerradas
  description: >
    Esta automatización determina si las ventanas deberían estar abiertas o cerradas
    en función de la temperatura exterior, interior, la temperatura de confort y la
    diferencia mínima configurada.
  domain: automation
  input:
    sensor_exterior:
      name: Sensor de temperatura exterior
      selector:
        entity:
          domain: sensor
          device_class: temperature
    sensor_interior:
      name: Sensor de temperatura interior
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperatura_confort_max:
      name: Temperatura de confort máxima
      selector:
        number:
          min: 15
          max: 28
          step: 0.5
          unit_of_measurement: "°C"
    temperatura_confort_min:
      name: Temperatura de confort mínima
      selector:
        number:
          min: 15
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    margen_diferencia:
      name: Diferencia mínima de temperatura para accionar
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          unit_of_measurement: "°C"
    estado_ventanas_texto:
      name: input_text donde guardar el estado
      selector:
        entity:
          domain: input_text

trigger:
  - platform: state
    entity_id: !input sensor_exterior
  - platform: state
    entity_id: !input sensor_interior

variables:
  sensor_exterior_id: !input sensor_exterior
  sensor_interior_id: !input sensor_interior
  temperatura_confort_min_valor: !input temperatura_confort_min
  temperatura_confort_max_valor: !input temperatura_confort_max
  estado_ventanas: !input estado_ventanas_texto
  margen: !input margen_diferencia

action:
  - service: input_text.set_value
    data:
      entity_id: "{{ estado_ventanas }}"
      value: >
        {% set raw_temp_ext = states(sensor_exterior_id) %}
        {% set raw_temp_int = states(sensor_interior_id) %}
        {% if raw_temp_ext in ['unknown', 'unavailable'] or raw_temp_int in ['unknown', 'unavailable'] %}
          unavailable
        {% else %}
          {% set temp_ext = raw_temp_ext | float(0) %}
          {% set temp_int = raw_temp_int | float(0) %}
          {% set temp_confort_max = temperatura_confort_max_valor | float %}
          {% set temp_confort_min = temperatura_confort_min_valor | float %}
          {% set margin = margen | float %}
          {% set vector = 0 %}
          {% if temp_int > temp_confort_max %}
            {% set vector = -1 %}
          {% elif temp_int < temp_confort_min %}
            {% set vector = 1 %}
          {% endif %}
          {% if vector == 1 and temp_ext > (temp_int + margin) %}
          Abrir Ventanas
          {% elif vector == 1  and temp_ext < temp_int %}
          Cerrar Ventanas
          {% elif vector == -1 and temp_ext > temp_int  %}
          Cerrar Ventanas
          {% elif vector == -1 and temp_ext < (temp_int - margin) %}
          Abrir Ventanas
          {% elif vector == 0 and temp_ext < temp_confort_min %}
          Cerrar Ventanas
          {% elif vector == 0 and temp_ext > temp_confort_max %}
          Cerrar Ventanas
          {% else %}
          Indistinto
          {% endif %}
        {% endif %}
mode: single
